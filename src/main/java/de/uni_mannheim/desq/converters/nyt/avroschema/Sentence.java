/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package de.uni_mannheim.desq.converters.nyt.avroschema;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Sentence extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sentence\",\"namespace\":\"avroschema\",\"fields\":[{\"name\":\"tokens\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Token\",\"fields\":[{\"name\":\"pos\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"ner\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"span\",\"type\":{\"type\":\"record\",\"name\":\"Span\",\"fields\":[{\"name\":\"start_index\",\"type\":[\"int\",\"null\"]},{\"name\":\"end_index\",\"type\":[\"int\",\"null\"]}]}},{\"name\":\"lemma\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"word\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"index\",\"type\":[\"int\",\"null\"]}]}}]},{\"name\":\"s_id\",\"type\":[\"int\",\"null\"]},{\"name\":\"sg\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"dp\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"span\",\"type\":[\"Span\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<Token> tokens;
  @Deprecated public java.lang.Integer s_id;
  @Deprecated public java.lang.String sg;
  @Deprecated public java.lang.String dp;
  @Deprecated public Span span;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sentence() {}

  /**
   * All-args constructor.
   */
  public Sentence(java.util.List<Token> tokens, java.lang.Integer s_id, java.lang.String sg, java.lang.String dp, Span span) {
    this.tokens = tokens;
    this.s_id = s_id;
    this.sg = sg;
    this.dp = dp;
    this.span = span;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tokens;
    case 1: return s_id;
    case 2: return sg;
    case 3: return dp;
    case 4: return span;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tokens = (java.util.List<Token>)value$; break;
    case 1: s_id = (java.lang.Integer)value$; break;
    case 2: sg = (java.lang.String)value$; break;
    case 3: dp = (java.lang.String)value$; break;
    case 4: span = (Span)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tokens' field.
   */
  public java.util.List<Token> getTokens() {
    return tokens;
  }

  /**
   * Sets the value of the 'tokens' field.
   * @param value the value to set.
   */
  public void setTokens(java.util.List<Token> value) {
    this.tokens = value;
  }

  /**
   * Gets the value of the 's_id' field.
   */
  public java.lang.Integer getSId() {
    return s_id;
  }

  /**
   * Sets the value of the 's_id' field.
   * @param value the value to set.
   */
  public void setSId(java.lang.Integer value) {
    this.s_id = value;
  }

  /**
   * Gets the value of the 'sg' field.
   */
  public java.lang.String getSg() {
    return sg;
  }

  /**
   * Sets the value of the 'sg' field.
   * @param value the value to set.
   */
  public void setSg(java.lang.String value) {
    this.sg = value;
  }

  /**
   * Gets the value of the 'dp' field.
   */
  public java.lang.String getDp() {
    return dp;
  }

  /**
   * Sets the value of the 'dp' field.
   * @param value the value to set.
   */
  public void setDp(java.lang.String value) {
    this.dp = value;
  }

  /**
   * Gets the value of the 'span' field.
   */
  public Span getSpan() {
    return span;
  }

  /**
   * Sets the value of the 'span' field.
   * @param value the value to set.
   */
  public void setSpan(Span value) {
    this.span = value;
  }

  /** Creates a new Sentence RecordBuilder */
  public static Sentence.Builder newBuilder() {
    return new Sentence.Builder();
  }

  /** Creates a new Sentence RecordBuilder by copying an existing Builder */
  public static Sentence.Builder newBuilder(Sentence.Builder other) {
    return new Sentence.Builder(other);
  }

  /** Creates a new Sentence RecordBuilder by copying an existing Sentence instance */
  public static Sentence.Builder newBuilder(Sentence other) {
    return new Sentence.Builder(other);
  }

  /**
   * RecordBuilder for Sentence instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sentence>
    implements org.apache.avro.data.RecordBuilder<Sentence> {

    private java.util.List<Token> tokens;
    private java.lang.Integer s_id;
    private java.lang.String sg;
    private java.lang.String dp;
    private Span span;

    /** Creates a new Builder */
    private Builder() {
      super(Sentence.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(Sentence.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tokens)) {
        this.tokens = data().deepCopy(fields()[0].schema(), other.tokens);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.s_id)) {
        this.s_id = data().deepCopy(fields()[1].schema(), other.s_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sg)) {
        this.sg = data().deepCopy(fields()[2].schema(), other.sg);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dp)) {
        this.dp = data().deepCopy(fields()[3].schema(), other.dp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.span)) {
        this.span = data().deepCopy(fields()[4].schema(), other.span);
        fieldSetFlags()[4] = true;
      }
    }

    /** Creates a Builder by copying an existing Sentence instance */
    private Builder(Sentence other) {
            super(Sentence.SCHEMA$);
      if (isValidValue(fields()[0], other.tokens)) {
        this.tokens = data().deepCopy(fields()[0].schema(), other.tokens);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.s_id)) {
        this.s_id = data().deepCopy(fields()[1].schema(), other.s_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sg)) {
        this.sg = data().deepCopy(fields()[2].schema(), other.sg);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dp)) {
        this.dp = data().deepCopy(fields()[3].schema(), other.dp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.span)) {
        this.span = data().deepCopy(fields()[4].schema(), other.span);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'tokens' field */
    public java.util.List<Token> getTokens() {
      return tokens;
    }

    /** Sets the value of the 'tokens' field */
    public Sentence.Builder setTokens(java.util.List<Token> value) {
      validate(fields()[0], value);
      this.tokens = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'tokens' field has been set */
    public boolean hasTokens() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'tokens' field */
    public Sentence.Builder clearTokens() {
      tokens = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 's_id' field */
    public java.lang.Integer getSId() {
      return s_id;
    }

    /** Sets the value of the 's_id' field */
    public Sentence.Builder setSId(java.lang.Integer value) {
      validate(fields()[1], value);
      this.s_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 's_id' field has been set */
    public boolean hasSId() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 's_id' field */
    public Sentence.Builder clearSId() {
      s_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sg' field */
    public java.lang.String getSg() {
      return sg;
    }

    /** Sets the value of the 'sg' field */
    public Sentence.Builder setSg(java.lang.String value) {
      validate(fields()[2], value);
      this.sg = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'sg' field has been set */
    public boolean hasSg() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'sg' field */
    public Sentence.Builder clearSg() {
      sg = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'dp' field */
    public java.lang.String getDp() {
      return dp;
    }

    /** Sets the value of the 'dp' field */
    public Sentence.Builder setDp(java.lang.String value) {
      validate(fields()[3], value);
      this.dp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'dp' field has been set */
    public boolean hasDp() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'dp' field */
    public Sentence.Builder clearDp() {
      dp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'span' field */
    public Span getSpan() {
      return span;
    }

    /** Sets the value of the 'span' field */
    public Sentence.Builder setSpan(Span value) {
      validate(fields()[4], value);
      this.span = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /** Checks whether the 'span' field has been set */
    public boolean hasSpan() {
      return fieldSetFlags()[4];
    }

    /** Clears the value of the 'span' field */
    public Sentence.Builder clearSpan() {
      span = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Sentence build() {
      try {
        Sentence record = new Sentence();
        record.tokens = fieldSetFlags()[0] ? this.tokens : (java.util.List<Token>) defaultValue(fields()[0]);
        record.s_id = fieldSetFlags()[1] ? this.s_id : (java.lang.Integer) defaultValue(fields()[1]);
        record.sg = fieldSetFlags()[2] ? this.sg : (java.lang.String) defaultValue(fields()[2]);
        record.dp = fieldSetFlags()[3] ? this.dp : (java.lang.String) defaultValue(fields()[3]);
        record.span = fieldSetFlags()[4] ? this.span : (Span) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
